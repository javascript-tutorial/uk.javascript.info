# 1-js/02-first-steps/04-variables/variable.svg
variable.svg:
  "Hello!":
    text: "Привіт!"
    position: "center"
  "message":
    text: "Повідомлення"
    position: "center"

# 1-js/02-first-steps/04-variables/variable-change.svg
variable-change.svg:
  "Hello!":
    text: "Привіт!"
    position: "center"
  "World!":
    text: "Світ!"
    position: "center"
  "message":
    text: "Повідомлення"
    position: "center"

ifelse_task2.svg:
  Begin: ''
  You don't know?: ''
  “ECMAScript”!: ''
  Right!: ''
  What's the: ''
  “official” name of: ''
  JavaScript?: ''
  Other: ''
  ECMAScript: ''

ifelse_task.svg:
  Begin: ''
  Canceled: ''
  Welcome!: ''
  I don't know you: ''
  Wrong password: ''
  Who's there?: ''
  Password?: ''
  Cancel: ''
  Admin: ''
  TheMaster: ''
  Other: ''

# 1-js/03-code-quality/01-debugging-chrome/chrome-open-sources.svg
chrome-open-sources.svg:
  "open sources":
    text: "показати вихідні файли"

# 1-js/03-code-quality/01-debugging-chrome/chrome-sources-breakpoint.svg
chrome-sources-breakpoint.svg:
  "here's the list":
    text: "список всіх точок в цьому файлі"
    position: "right"
  "breakpoints":
    text: "точки зупинки"

# 1-js/03-code-quality/01-debugging-chrome/chrome-sources-debugger-pause.svg
chrome-sources-debugger-pause.svg:
  "see the outer call details":
    text: "перегляд деталей зовнішнього виклику"
    position: "right"
  "watch expressions":
    text: "перегляд виразів"
    position: "right"
  "current variables":
    text: "поточні змінні"
    position: "right"

# 1-js/03-code-quality/01-debugging-chrome/chrome-sources-debugger-trace-1.svg
chrome-sources-debugger-trace-1.svg:
  "nested calls":
    text: "вкладені виклики"

toolbarButtonGlyphs.svg: {}

code-style.svg:
  '2': ''
  No space: ''
  between the function name and parentheses: ''
  between the parentheses and the parameter: ''
  Indentation: ''
  2 spaces: ''
  'A space ': ''
  after for/if/while…: ''
  '} else { without a line break': ''
  Spaces around a nested call: ''
  An empty line: ''
  between logical blocks: ''
  Lines are not very long: ''
  A semicolon ;: ''
  is mandatory: ''
  Spaces: ''
  around operators: ''
  'Curly brace {': ''
  'on the same line, after a space': ''
  A space: ''
  between: ''
  parameters: ''
  A space between parameters: ''

recursion-pow.svg:
  'pow(x,n)': ''
  x: ''
  'x * pow(x, n-1)': ''
  n == 1 ?: ''
  'Yes': ''
  'No': ''
  recursive call until n==1: ''

try-catch-flow.svg:
  Begin: "Початок"
  No Errors: "Помилка не виникає"
  An error occured in the code: "Помилка виникає"
  Ignore catch block: "Ігнорування catch блоку"
  Ignore the rest of try: "Ігнорування решти try блоку"
  Execute catch block: "Виконання catch блоку"
  'try {': ''
  '': ''
  '}': ''
  // code...: '// код...'

promise-handler-variants.svg:
  _defaults:
    position: "center"
  ...with the result: '...з результатом'
  of the new promise...: 'нового промісу...'
  'the call of .then(handler) always returns a promise:': 'виклик .then(handler) завжди повертає проміс:'
  if handler ends with…: 'якщо handler завершується…'
  return value: 'поверненням значення'
  return promise: 'поверненням промісу'
  throw error: 'помилкою'
  'that promise settles with:': 'цей проміс завершується з:'

statusbarButtonGlyphs.svg:
  '!': ''

field.svg: {}

placeholder.svg: {}

logo-fetch.svg: {}

demo.svg:
  '1': ''

before-prepend-append-after.svg: 
  (…nodes-or-strings): "(...вузли або рядки)"


